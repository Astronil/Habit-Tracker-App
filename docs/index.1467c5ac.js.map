{"mappings":"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","sources":["<anon>","assets/js/auth.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $6AR8M = parcelRequire(\"6AR8M\");\n\nvar $gdelx = parcelRequire(\"gdelx\");\n\nvar $ku4mm = parcelRequire(\"ku4mm\");\nconst $f0561c3afbb542ab$var$auth = (0, $6AR8M.getAuth)(); // Initialize Firebase Auth instance\nconst $f0561c3afbb542ab$var$database = (0, $gdelx.getDatabase)(); // Initialize Firebase Realtime Database\n// const firestore = getFirestore(); // Initialize Firestore\n// Ensure the BiometricAuth class is available\nconst $f0561c3afbb542ab$var$biometricAuth = new (0, $ku4mm.BiometricAuth)();\n// Function to show loading overlay\nfunction $f0561c3afbb542ab$var$showLoading() {\n    const loadingOverlay = document.getElementById(\"loadingOverlay\");\n    loadingOverlay.style.display = \"block\"; // Show the loading overlay\n}\n// Function to hide loading overlay\nfunction $f0561c3afbb542ab$var$hideLoading() {\n    const loadingOverlay = document.getElementById(\"loadingOverlay\");\n    loadingOverlay.style.display = \"none\"; // Hide the loading overlay\n}\n// Function to show toast messages\nfunction $f0561c3afbb542ab$var$showToast(message, isError = false) {\n    const toast = document.getElementById(\"toast\");\n    toast.textContent = message;\n    toast.style.backgroundColor = isError ? \"var(--error)\" : \"var(--success)\";\n    toast.style.display = \"block\";\n    setTimeout(()=>{\n        toast.style.display = \"none\";\n    }, 3000);\n}\ndocument.addEventListener(\"DOMContentLoaded\", async ()=>{\n    // Initialize biometricAuth and await its initialization\n    await $f0561c3afbb542ab$var$biometricAuth.init(); // Await the initialization to make sure it's ready\n    console.log(\"Document loaded, initializing Firebase...\");\n    const googleBtn = document.getElementById(\"googleBtn\");\n    const registerForm = document.getElementById(\"registerForm\");\n    const registerBtn = document.getElementById(\"registerBtn\");\n    const loginForm = document.getElementById(\"loginForm\");\n    const biometricBtn = document.getElementById(\"biometricBtn\");\n    const registerModal = document.getElementById(\"registerModal\");\n    const closeModalBtns = document.querySelectorAll(\".closeModalBtn\");\n    loginForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        $f0561c3afbb542ab$var$showLoading();\n        const email = document.getElementById(\"email\").value;\n        const password = document.getElementById(\"password\").value;\n        try {\n            await (0, $6AR8M.signInWithEmailAndPassword)($f0561c3afbb542ab$var$auth, email, password);\n            if (!sessionStorage.getItem(\"loggedIn\")) {\n                if (!window.location.pathname.includes(\"index.html\")) window.location.href = \"index.html\";\n            } else if (window.location.pathname.includes(\"index.html\")) window.location.href = \"habits.html\";\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            $f0561c3afbb542ab$var$showToast(error.message, true);\n        } finally{\n            $f0561c3afbb542ab$var$hideLoading();\n        }\n    });\n    // Register form handler\n    registerForm.addEventListener(\"submit\", async (e)=>{\n        e.preventDefault();\n        $f0561c3afbb542ab$var$showLoading();\n        const name = document.getElementById(\"regName\").value;\n        const email = document.getElementById(\"regEmail\").value;\n        const password = document.getElementById(\"regPassword\").value;\n        const confirmPassword = document.getElementById(\"confirmPassword\").value;\n        if (password !== confirmPassword) {\n            $f0561c3afbb542ab$var$showToast(\"Passwords do not match\", true);\n            $f0561c3afbb542ab$var$hideLoading();\n            return;\n        }\n        try {\n            // Create user\n            const userCredential = await (0, $6AR8M.createUserWithEmailAndPassword)($f0561c3afbb542ab$var$auth, email, password);\n            // Update user profile with name\n            await (0, $6AR8M.updateProfile)(userCredential.user, {\n                displayName: name\n            });\n            // Create user document in Realtime Database\n            await (0, $gdelx.update)((0, $gdelx.ref)($f0561c3afbb542ab$var$database, `users/${userCredential.user.uid}`), {\n                name: name,\n                email: email,\n                createdAt: Date.now()\n            });\n            // Register biometric if available\n            if ($f0561c3afbb542ab$var$biometricAuth.available) {\n                console.log(\"Starting biometric registration...\");\n                await $f0561c3afbb542ab$var$biometricAuth.register(userCredential.user.uid, name, email, password); // Pass email and password too\n                console.log(\"Biometric registration complete\");\n                // Save the email and password to Realtime Database after successful biometric registration\n                await (0, $gdelx.update)((0, $gdelx.ref)($f0561c3afbb542ab$var$database, `biometricUsers/${userCredential.user.uid}`), {\n                    email: email,\n                    password: password\n                });\n            } else console.log(\"Biometric authentication not available on this device.\");\n            $f0561c3afbb542ab$var$showToast(\"Account created successfully!\");\n            // Delay redirection to ensure biometric data is saved\n            setTimeout(()=>{\n                if (!sessionStorage.getItem(\"loggedIn\")) {\n                    if (!window.location.pathname.includes(\"habits.html\")) window.location.href = \"index.html\";\n                } else if (window.location.pathname.includes(\"index.html\")) window.location.href = \"habits.html\";\n            // Redirect to home page\n            }, 1000); // 1 second delay\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            $f0561c3afbb542ab$var$showToast(error.message, true);\n        } finally{\n            $f0561c3afbb542ab$var$hideLoading();\n        }\n    });\n    // Handle Google sign-in\n    googleBtn.addEventListener(\"click\", async ()=>{\n        console.log(\"Google sign-in button clicked.\");\n        $f0561c3afbb542ab$var$showLoading(); // Show loading overlay\n        const provider = new (0, $6AR8M.GoogleAuthProvider)(); // Use the imported GoogleAuthProvider\n        try {\n            const result = await (0, $6AR8M.signInWithPopup)($f0561c3afbb542ab$var$auth, provider); // Use signInWithPopup correctly\n            console.log(\"Google sign-in successful:\", result);\n            // Create or update user document\n            await (0, $gdelx.update)((0, $gdelx.ref)($f0561c3afbb542ab$var$database, `users/${result.user.uid}`), {\n                name: result.user.displayName,\n                email: result.user.email,\n                lastLogin: Date.now()\n            });\n            if (!sessionStorage.getItem(\"loggedIn\")) {\n                if (!window.location.pathname.includes(\"habits.html\")) window.location.href = \"index.html\";\n            } else if (window.location.pathname.includes(\"index.html\")) window.location.href = \"habits.html\";\n        // Redirect to the dashboard\n        } catch (error) {\n            console.error(\"Google sign-in error:\", error);\n            $f0561c3afbb542ab$var$showToast(`Google sign-in error: ${error.message}`, true);\n        } finally{\n            $f0561c3afbb542ab$var$hideLoading(); // Hide loading overlay\n        }\n    });\n    // Handle biometric authentication\n    biometricBtn.addEventListener(\"click\", async ()=>{\n        console.log(\"Biometric authentication button clicked.\");\n        if (!$f0561c3afbb542ab$var$biometricAuth.available) {\n            $f0561c3afbb542ab$var$showToast(\"Biometric authentication is not available\", true);\n            return;\n        }\n        $f0561c3afbb542ab$var$showLoading();\n        try {\n            // Ensure the user is authenticated first\n            const lastUser = $f0561c3afbb542ab$var$auth.currentUser || JSON.parse(localStorage.getItem(\"lastUser\"));\n            if (!lastUser) throw new Error(\"Please sign in with email first to set up biometric authentication\");\n            const isAuthenticated = await $f0561c3afbb542ab$var$biometricAuth.authenticate(lastUser.uid);\n            console.log(\"Biometric authentication result:\", isAuthenticated);\n            if (isAuthenticated) {\n                // Retrieve stored email and password for the current user from Realtime Database\n                const snapshot = await (0, $gdelx.get)((0, $gdelx.ref)($f0561c3afbb542ab$var$database, `biometricUsers/${lastUser.uid}`));\n                if (snapshot.exists()) {\n                    const { email: email, password: password } = snapshot.val();\n                    // Sign in the user with the stored email and password\n                    await (0, $6AR8M.signInWithEmailAndPassword)($f0561c3afbb542ab$var$auth, email, password);\n                    console.log(\"User signed in with stored credentials\");\n                    if (!sessionStorage.getItem(\"loggedIn\")) {\n                        if (!window.location.pathname.includes(\"habits.html\")) window.location.href = \"index.html\";\n                    } else if (window.location.pathname.includes(\"index.html\")) window.location.href = \"habits.html\";\n                // Redirect to the dashboard if biometric authentication is successful\n                } else throw new Error(\"Biometric user not found.\");\n            } else $f0561c3afbb542ab$var$showToast(\"Biometric authentication failed\", true);\n        } catch (error) {\n            console.error(\"Biometric authentication error:\", error);\n            $f0561c3afbb542ab$var$showToast(`Biometric authentication error: ${error.message}`, true);\n        } finally{\n            $f0561c3afbb542ab$var$hideLoading();\n        }\n    });\n    // Modal controls\n    registerBtn.addEventListener(\"click\", ()=>{\n        registerModal.style.display = \"block\";\n    });\n    closeModalBtns.forEach((btn)=>{\n        btn.addEventListener(\"click\", ()=>{\n            registerModal.style.display = \"none\";\n        });\n    });\n    // Close modal when clicking outside\n    window.addEventListener(\"click\", (e)=>{\n        if (e.target === registerModal) registerModal.style.display = \"none\";\n    });\n    // Password visibility toggle\n    document.querySelectorAll(\".toggle-password\").forEach((button)=>{\n        button.addEventListener(\"click\", ()=>{\n            const input = button.parentElement.querySelector(\"input\");\n            const icon = button.querySelector(\"i\");\n            if (input.type === \"password\") {\n                input.type = \"text\";\n                icon.textContent = \"visibility\";\n            } else {\n                input.type = \"password\";\n                icon.textContent = \"visibility_off\";\n            }\n        });\n    });\n    // Password validation\n    const regPassword = document.getElementById(\"regPassword\");\n    const requirements = document.querySelectorAll(\"[data-requirement]\");\n    regPassword.addEventListener(\"input\", ()=>{\n        const password = regPassword.value;\n        // Check each requirement\n        requirements.forEach((req)=>{\n            const type = req.dataset.requirement;\n            let valid = false;\n            switch(type){\n                case \"length\":\n                    valid = password.length >= 8;\n                    break;\n                case \"uppercase\":\n                    valid = /[A-Z]/.test(password);\n                    break;\n                case \"lowercase\":\n                    valid = /[a-z]/.test(password);\n                    break;\n                case \"number\":\n                    valid = /\\d/.test(password);\n                    break;\n            }\n            req.style.color = valid ? \"var(--success)\" : \"var(--error)\";\n        });\n    });\n// onAuthStateChanged(auth, (user) => {\n//   const isLoginPage = window.location.pathname.includes(\"login.html\");\n//   if (user) {\n//     // User is authenticated\n//     if (isLoginPage) {\n//       // Redirect to habits page if already logged in\n//       window.location.href = \"habits.html\";\n//     }\n//   } else {\n//     // User is not authenticated\n//     if (!isLoginPage) {\n//       // Redirect to login page if not logged in\n//       window.location.href = \"index.html\";\n//     }\n//   }\n// });\n});\n\n\n//# sourceMappingURL=index.1467c5ac.js.map\n","import {\r\n  getAuth,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  updateProfile,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\";\r\nimport { getDatabase, ref, update, get } from \"firebase/database\";\r\n\r\n// import {\r\n//   getAuth,\r\n//   GoogleAuthProvider,\r\n//   signInWithPopup,\r\n//   signInWithEmailAndPassword,\r\n//   createUserWithEmailAndPassword,\r\n//   updateProfile,\r\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-auth.js\";\r\n// import {\r\n//   getDatabase,\r\n//   ref,\r\n//   update,\r\n//   get,\r\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-database.js\";\r\n// // import {\r\n//   getFirestore,\r\n//   doc,\r\n//   setDoc,\r\n//   getDoc,\r\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-firestore.js\";\r\nimport { BiometricAuth } from \"./biometric-auth.js\"; // Correct import for the class\r\n\r\nconst auth = getAuth(); // Initialize Firebase Auth instance\r\nconst database = getDatabase(); // Initialize Firebase Realtime Database\r\n// const firestore = getFirestore(); // Initialize Firestore\r\n\r\n// Ensure the BiometricAuth class is available\r\nconst biometricAuth = new BiometricAuth();\r\n\r\n// Function to show loading overlay\r\nfunction showLoading() {\r\n  const loadingOverlay = document.getElementById(\"loadingOverlay\");\r\n  loadingOverlay.style.display = \"block\"; // Show the loading overlay\r\n}\r\n\r\n// Function to hide loading overlay\r\nfunction hideLoading() {\r\n  const loadingOverlay = document.getElementById(\"loadingOverlay\");\r\n  loadingOverlay.style.display = \"none\"; // Hide the loading overlay\r\n}\r\n\r\n// Function to show toast messages\r\nfunction showToast(message, isError = false) {\r\n  const toast = document.getElementById(\"toast\");\r\n  toast.textContent = message;\r\n  toast.style.backgroundColor = isError ? \"var(--error)\" : \"var(--success)\";\r\n  toast.style.display = \"block\";\r\n  setTimeout(() => {\r\n    toast.style.display = \"none\";\r\n  }, 3000);\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n  // Initialize biometricAuth and await its initialization\r\n  await biometricAuth.init(); // Await the initialization to make sure it's ready\r\n\r\n  console.log(\"Document loaded, initializing Firebase...\");\r\n\r\n  const googleBtn = document.getElementById(\"googleBtn\");\r\n  const registerForm = document.getElementById(\"registerForm\");\r\n  const registerBtn = document.getElementById(\"registerBtn\");\r\n  const loginForm = document.getElementById(\"loginForm\");\r\n  const biometricBtn = document.getElementById(\"biometricBtn\");\r\n  const registerModal = document.getElementById(\"registerModal\");\r\n  const closeModalBtns = document.querySelectorAll(\".closeModalBtn\");\r\n\r\n  loginForm.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault();\r\n    showLoading();\r\n\r\n    const email = document.getElementById(\"email\").value;\r\n    const password = document.getElementById(\"password\").value;\r\n\r\n    try {\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      if (!sessionStorage.getItem(\"loggedIn\")) {\r\n        if (!window.location.pathname.includes(\"index.html\")) {\r\n          window.location.href = \"index.html\";\r\n        }\r\n      } else {\r\n        if (window.location.pathname.includes(\"index.html\")) {\r\n          window.location.href = \"habits.html\";\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      showToast(error.message, true);\r\n    } finally {\r\n      hideLoading();\r\n    }\r\n  });\r\n\r\n  // Register form handler\r\n  registerForm.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault();\r\n    showLoading();\r\n\r\n    const name = document.getElementById(\"regName\").value;\r\n    const email = document.getElementById(\"regEmail\").value;\r\n    const password = document.getElementById(\"regPassword\").value;\r\n    const confirmPassword = document.getElementById(\"confirmPassword\").value;\r\n\r\n    if (password !== confirmPassword) {\r\n      showToast(\"Passwords do not match\", true);\r\n      hideLoading();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Create user\r\n      const userCredential = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n\r\n      // Update user profile with name\r\n      await updateProfile(userCredential.user, { displayName: name });\r\n\r\n      // Create user document in Realtime Database\r\n      await update(ref(database, `users/${userCredential.user.uid}`), {\r\n        name,\r\n        email,\r\n        createdAt: Date.now(),\r\n      });\r\n\r\n      // Register biometric if available\r\n      if (biometricAuth.available) {\r\n        console.log(\"Starting biometric registration...\");\r\n        await biometricAuth.register(\r\n          userCredential.user.uid,\r\n          name,\r\n          email,\r\n          password\r\n        ); // Pass email and password too\r\n        console.log(\"Biometric registration complete\");\r\n\r\n        // Save the email and password to Realtime Database after successful biometric registration\r\n        await update(\r\n          ref(database, `biometricUsers/${userCredential.user.uid}`),\r\n          {\r\n            email,\r\n            password, // Store the email and password for later biometric authentication\r\n          }\r\n        );\r\n      } else {\r\n        console.log(\"Biometric authentication not available on this device.\");\r\n      }\r\n\r\n      showToast(\"Account created successfully!\");\r\n\r\n      // Delay redirection to ensure biometric data is saved\r\n      setTimeout(() => {\r\n        if (!sessionStorage.getItem(\"loggedIn\")) {\r\n          if (!window.location.pathname.includes(\"habits.html\")) {\r\n            window.location.href = \"index.html\";\r\n          }\r\n        } else {\r\n          if (window.location.pathname.includes(\"index.html\")) {\r\n            window.location.href = \"habits.html\";\r\n          }\r\n        }\r\n        // Redirect to home page\r\n      }, 1000); // 1 second delay\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n      showToast(error.message, true);\r\n    } finally {\r\n      hideLoading();\r\n    }\r\n  });\r\n\r\n  // Handle Google sign-in\r\n  googleBtn.addEventListener(\"click\", async () => {\r\n    console.log(\"Google sign-in button clicked.\");\r\n    showLoading(); // Show loading overlay\r\n    const provider = new GoogleAuthProvider(); // Use the imported GoogleAuthProvider\r\n\r\n    try {\r\n      const result = await signInWithPopup(auth, provider); // Use signInWithPopup correctly\r\n      console.log(\"Google sign-in successful:\", result);\r\n\r\n      // Create or update user document\r\n      await update(ref(database, `users/${result.user.uid}`), {\r\n        name: result.user.displayName,\r\n        email: result.user.email,\r\n        lastLogin: Date.now(),\r\n      });\r\n\r\n      if (!sessionStorage.getItem(\"loggedIn\")) {\r\n        if (!window.location.pathname.includes(\"habits.html\")) {\r\n          window.location.href = \"index.html\";\r\n        }\r\n      } else {\r\n        if (window.location.pathname.includes(\"index.html\")) {\r\n          window.location.href = \"habits.html\";\r\n        }\r\n      }\r\n      // Redirect to the dashboard\r\n    } catch (error) {\r\n      console.error(\"Google sign-in error:\", error);\r\n      showToast(`Google sign-in error: ${error.message}`, true);\r\n    } finally {\r\n      hideLoading(); // Hide loading overlay\r\n    }\r\n  });\r\n\r\n  // Handle biometric authentication\r\n  biometricBtn.addEventListener(\"click\", async () => {\r\n    console.log(\"Biometric authentication button clicked.\");\r\n\r\n    if (!biometricAuth.available) {\r\n      showToast(\"Biometric authentication is not available\", true);\r\n      return;\r\n    }\r\n\r\n    showLoading();\r\n    try {\r\n      // Ensure the user is authenticated first\r\n      const lastUser =\r\n        auth.currentUser || JSON.parse(localStorage.getItem(\"lastUser\"));\r\n\r\n      if (!lastUser) {\r\n        throw new Error(\r\n          \"Please sign in with email first to set up biometric authentication\"\r\n        );\r\n      }\r\n\r\n      const isAuthenticated = await biometricAuth.authenticate(lastUser.uid);\r\n      console.log(\"Biometric authentication result:\", isAuthenticated);\r\n\r\n      if (isAuthenticated) {\r\n        // Retrieve stored email and password for the current user from Realtime Database\r\n        const snapshot = await get(\r\n          ref(database, `biometricUsers/${lastUser.uid}`)\r\n        );\r\n\r\n        if (snapshot.exists()) {\r\n          const { email, password } = snapshot.val();\r\n\r\n          // Sign in the user with the stored email and password\r\n          await signInWithEmailAndPassword(auth, email, password);\r\n          console.log(\"User signed in with stored credentials\");\r\n\r\n          if (!sessionStorage.getItem(\"loggedIn\")) {\r\n            if (!window.location.pathname.includes(\"habits.html\")) {\r\n              window.location.href = \"index.html\";\r\n            }\r\n          } else {\r\n            if (window.location.pathname.includes(\"index.html\")) {\r\n              window.location.href = \"habits.html\";\r\n            }\r\n          }\r\n          // Redirect to the dashboard if biometric authentication is successful\r\n        } else {\r\n          throw new Error(\"Biometric user not found.\");\r\n        }\r\n      } else {\r\n        showToast(\"Biometric authentication failed\", true);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Biometric authentication error:\", error);\r\n      showToast(`Biometric authentication error: ${error.message}`, true);\r\n    } finally {\r\n      hideLoading();\r\n    }\r\n  });\r\n\r\n  // Modal controls\r\n  registerBtn.addEventListener(\"click\", () => {\r\n    registerModal.style.display = \"block\";\r\n  });\r\n\r\n  closeModalBtns.forEach((btn) => {\r\n    btn.addEventListener(\"click\", () => {\r\n      registerModal.style.display = \"none\";\r\n    });\r\n  });\r\n\r\n  // Close modal when clicking outside\r\n  window.addEventListener(\"click\", (e) => {\r\n    if (e.target === registerModal) {\r\n      registerModal.style.display = \"none\";\r\n    }\r\n  });\r\n\r\n  // Password visibility toggle\r\n  document.querySelectorAll(\".toggle-password\").forEach((button) => {\r\n    button.addEventListener(\"click\", () => {\r\n      const input = button.parentElement.querySelector(\"input\");\r\n      const icon = button.querySelector(\"i\");\r\n\r\n      if (input.type === \"password\") {\r\n        input.type = \"text\";\r\n        icon.textContent = \"visibility\";\r\n      } else {\r\n        input.type = \"password\";\r\n        icon.textContent = \"visibility_off\";\r\n      }\r\n    });\r\n  });\r\n\r\n  // Password validation\r\n  const regPassword = document.getElementById(\"regPassword\");\r\n  const requirements = document.querySelectorAll(\"[data-requirement]\");\r\n\r\n  regPassword.addEventListener(\"input\", () => {\r\n    const password = regPassword.value;\r\n\r\n    // Check each requirement\r\n    requirements.forEach((req) => {\r\n      const type = req.dataset.requirement;\r\n      let valid = false;\r\n\r\n      switch (type) {\r\n        case \"length\":\r\n          valid = password.length >= 8;\r\n          break;\r\n        case \"uppercase\":\r\n          valid = /[A-Z]/.test(password);\r\n          break;\r\n        case \"lowercase\":\r\n          valid = /[a-z]/.test(password);\r\n          break;\r\n        case \"number\":\r\n          valid = /\\d/.test(password);\r\n          break;\r\n      }\r\n\r\n      req.style.color = valid ? \"var(--success)\" : \"var(--error)\";\r\n    });\r\n  });\r\n\r\n  // onAuthStateChanged(auth, (user) => {\r\n  //   const isLoginPage = window.location.pathname.includes(\"login.html\");\r\n\r\n  //   if (user) {\r\n  //     // User is authenticated\r\n  //     if (isLoginPage) {\r\n  //       // Redirect to habits page if already logged in\r\n  //       window.location.href = \"habits.html\";\r\n  //     }\r\n  //   } else {\r\n  //     // User is not authenticated\r\n  //     if (!isLoginPage) {\r\n  //       // Redirect to login page if not logged in\r\n  //       window.location.href = \"index.html\";\r\n  //     }\r\n  //   }\r\n  // });\r\n});\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$6AR8M","$gdelx","$ku4mm","$f0561c3afbb542ab$var$auth","getAuth","$f0561c3afbb542ab$var$database","getDatabase","$f0561c3afbb542ab$var$biometricAuth","BiometricAuth","$f0561c3afbb542ab$var$showLoading","loadingOverlay","document","getElementById","style","display","$f0561c3afbb542ab$var$hideLoading","$f0561c3afbb542ab$var$showToast","message","isError","toast","textContent","backgroundColor","setTimeout","addEventListener","console","log","googleBtn","registerForm","registerBtn","loginForm","biometricBtn","registerModal","closeModalBtns","querySelectorAll","e","preventDefault","email","value","password","signInWithEmailAndPassword","sessionStorage","getItem","window","location","pathname","includes","href","error","name","userCredential","createUserWithEmailAndPassword","updateProfile","user","displayName","update","ref","uid","createdAt","Date","now","available","provider","GoogleAuthProvider","result","signInWithPopup","lastLogin","lastUser","currentUser","JSON","parse","localStorage","isAuthenticated","authenticate","snapshot","get","exists","val","forEach","btn","target","button","input","parentElement","querySelector","icon","type","regPassword","requirements","req","dataset","requirement","valid","length","test","color"],"version":3,"file":"index.1467c5ac.js.map"}