{"mappings":"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","sources":["<anon>","assets/js/biometric-auth.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ku4mm\", function(module, exports) {\n\n$parcel$export(module.exports, \"BiometricAuth\", () => $ee99fdb6e79a3b19$export$ae1320360e981535);\n// Import necessary Firebase functions\n// import {\n//   doc,\n//   getDoc,\n//   setDoc,\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-firestore.js\";\n// import {\n//   getDatabase,\n//   get,\n//   set,\n//   ref,\n//   // update,\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-database.js\";\n// import {\n//   getAuth,\n//   signInWithEmailAndPassword,\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-auth.js\";\n\nvar $gdelx = parcelRequire(\"gdelx\");\n\nvar $6AR8M = parcelRequire(\"6AR8M\");\n// Access Firestore from global scope\n// const firestore = window.firebase.firestore;\nconst $ee99fdb6e79a3b19$var$database = (0, $gdelx.getDatabase)();\nclass $ee99fdb6e79a3b19$export$ae1320360e981535 {\n    constructor(){\n        this.available = false;\n        this.init();\n    }\n    async init() {\n        try {\n            if (!window.PublicKeyCredential) {\n                console.log(\"WebAuthn is not supported in this browser\");\n                return;\n            }\n            // Check if platform authenticator is available\n            this.available = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n        } catch (error) {\n            console.error(\"Error initializing biometric authentication:\", error);\n            this.available = false;\n        }\n    }\n    async register(userId, userName, email, password) {\n        if (!this.available) throw new Error(\"Biometric authentication is not available\");\n        try {\n            // Debugging logs for email and password\n            console.log(\"Email:\", email);\n            console.log(\"Password:\", password);\n            // Ensure email and password are not undefined\n            if (!email || !password) throw new Error(\"Email or password is missing\");\n            const userIdBuffer = new TextEncoder().encode(userId);\n            const publicKeyCredentialCreationOptions = {\n                challenge: new Uint8Array(32),\n                rp: {\n                    name: \"Habit Tracker\",\n                    id: window.location.hostname\n                },\n                user: {\n                    id: userIdBuffer,\n                    name: userName,\n                    displayName: userName\n                },\n                pubKeyCredParams: [\n                    {\n                        type: \"public-key\",\n                        alg: -7\n                    }\n                ],\n                authenticatorSelection: {\n                    authenticatorAttachment: \"platform\",\n                    userVerification: \"required\"\n                },\n                timeout: 60000\n            };\n            const credential = await navigator.credentials.create({\n                publicKey: publicKeyCredentialCreationOptions\n            });\n            const credentialId = btoa(String.fromCharCode(...new Uint8Array(credential.rawId)));\n            // Store the credentialId, userId, email, and password in Realtime Database\n            await (0, $gdelx.set)((0, $gdelx.ref)($ee99fdb6e79a3b19$var$database, `biometricCredentials/${userId}`), {\n                credentialId: credentialId,\n                uid: userId,\n                email: email,\n                password: password,\n                timestamp: Date.now()\n            });\n            console.log(\"Biometric credentials and user info saved successfully\");\n            return true;\n        } catch (error) {\n            console.error(\"Error registering biometric:\", error);\n            throw error;\n        }\n    }\n    async authenticate(userId) {\n        if (!this.available) throw new Error(\"Biometric authentication is not available\");\n        try {\n            // Fetch the stored credentialId (public key), email, and password from Realtime Database\n            const credentialSnapshot = await (0, $gdelx.get)((0, $gdelx.ref)($ee99fdb6e79a3b19$var$database, `biometricCredentials/${userId}`));\n            if (!credentialSnapshot.exists()) throw new Error(\"No registered biometric credentials found\");\n            const storedCredential = credentialSnapshot.val();\n            const credentialId = Uint8Array.from(atob(storedCredential.credentialId), (c)=>c.charCodeAt(0));\n            // Generate a secure challenge (e.g., using crypto or get it from your server)\n            const challenge = this.generateChallenge();\n            // Prepare assertion options\n            const assertionOptions = {\n                challenge: challenge,\n                allowCredentials: [\n                    {\n                        id: credentialId,\n                        type: \"public-key\"\n                    }\n                ],\n                userVerification: \"required\",\n                timeout: 60000\n            };\n            // Request the assertion\n            const assertion = await navigator.credentials.get({\n                publicKey: assertionOptions\n            });\n            // If the assertion was successful, we sign the user into Firebase\n            if (assertion) {\n                // Get the email and password from the stored data\n                const { email: email, password: password } = storedCredential;\n                // Sign in the user with the stored email and password\n                const auth = (0, $6AR8M.getAuth)();\n                await (0, $6AR8M.signInWithEmailAndPassword)(auth, email, password);\n                console.log(\"User successfully authenticated with Firebase.\");\n                // Redirect to the dashboard if authentication is successful\n                if (!sessionStorage.getItem(\"redirected\")) {\n                    sessionStorage.setItem(\"redirected\", \"true\");\n                    window.location.href = \"index.html\";\n                }\n                return true;\n            } else {\n                console.error(\"Biometric authentication failed\");\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error authenticating with biometric:\", error);\n            throw error;\n        }\n    }\n    // Generate a secure challenge (This can be securely generated on the server)\n    generateChallenge() {\n        // Simple random challenge for now; use a more secure method in production\n        return new Uint8Array(32);\n    }\n}\n// Make sure the BiometricAuth class is globally available\nwindow.BiometricAuth = $ee99fdb6e79a3b19$export$ae1320360e981535;\n\n});\n\n\nparcelRequire(\"ku4mm\");\n\n//# sourceMappingURL=index.3e1f9f21.js.map\n","// Import necessary Firebase functions\r\n// import {\r\n//   doc,\r\n//   getDoc,\r\n//   setDoc,\r\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-firestore.js\";\r\n// import {\r\n//   getDatabase,\r\n//   get,\r\n//   set,\r\n//   ref,\r\n//   // update,\r\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-database.js\";\r\n// import {\r\n//   getAuth,\r\n//   signInWithEmailAndPassword,\r\n// } from \"https://www.gstatic.com/firebasejs/10.8.1/firebase-auth.js\";\r\n\r\nimport { getDatabase, get, set, ref } from \"firebase/database\"; // Local Firebase import\r\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\"; // Local Firebase import\r\n\r\n// Access Firestore from global scope\r\n// const firestore = window.firebase.firestore;\r\nconst database = getDatabase();\r\n\r\nexport class BiometricAuth {\r\n  constructor() {\r\n    this.available = false;\r\n    this.init();\r\n  }\r\n\r\n  async init() {\r\n    try {\r\n      if (!window.PublicKeyCredential) {\r\n        console.log(\"WebAuthn is not supported in this browser\");\r\n        return;\r\n      }\r\n\r\n      // Check if platform authenticator is available\r\n      this.available =\r\n        await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\r\n    } catch (error) {\r\n      console.error(\"Error initializing biometric authentication:\", error);\r\n      this.available = false;\r\n    }\r\n  }\r\n\r\n  async register(userId, userName, email, password) {\r\n    if (!this.available) {\r\n      throw new Error(\"Biometric authentication is not available\");\r\n    }\r\n\r\n    try {\r\n      // Debugging logs for email and password\r\n      console.log(\"Email:\", email);\r\n      console.log(\"Password:\", password);\r\n\r\n      // Ensure email and password are not undefined\r\n      if (!email || !password) {\r\n        throw new Error(\"Email or password is missing\");\r\n      }\r\n\r\n      const userIdBuffer = new TextEncoder().encode(userId);\r\n\r\n      const publicKeyCredentialCreationOptions = {\r\n        challenge: new Uint8Array(32), // This challenge should ideally be generated on the server\r\n        rp: {\r\n          name: \"Habit Tracker\",\r\n          id: window.location.hostname,\r\n        },\r\n        user: {\r\n          id: userIdBuffer,\r\n          name: userName,\r\n          displayName: userName,\r\n        },\r\n        pubKeyCredParams: [\r\n          {\r\n            type: \"public-key\",\r\n            alg: -7, // ES256 algorithm\r\n          },\r\n        ],\r\n        authenticatorSelection: {\r\n          authenticatorAttachment: \"platform\",\r\n          userVerification: \"required\",\r\n        },\r\n        timeout: 60000,\r\n      };\r\n\r\n      const credential = await navigator.credentials.create({\r\n        publicKey: publicKeyCredentialCreationOptions,\r\n      });\r\n\r\n      const credentialId = btoa(\r\n        String.fromCharCode(...new Uint8Array(credential.rawId))\r\n      );\r\n\r\n      // Store the credentialId, userId, email, and password in Realtime Database\r\n      await set(ref(database, `biometricCredentials/${userId}`), {\r\n        credentialId,\r\n        uid: userId, // Store the user's UID\r\n        email, // Store the email for later use\r\n        password, // Store the password for later use (not recommended for production, but works for now)\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      console.log(\"Biometric credentials and user info saved successfully\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error registering biometric:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async authenticate(userId) {\r\n    if (!this.available) {\r\n      throw new Error(\"Biometric authentication is not available\");\r\n    }\r\n\r\n    try {\r\n      // Fetch the stored credentialId (public key), email, and password from Realtime Database\r\n      const credentialSnapshot = await get(\r\n        ref(database, `biometricCredentials/${userId}`)\r\n      );\r\n\r\n      if (!credentialSnapshot.exists()) {\r\n        throw new Error(\"No registered biometric credentials found\");\r\n      }\r\n\r\n      const storedCredential = credentialSnapshot.val();\r\n      const credentialId = Uint8Array.from(\r\n        atob(storedCredential.credentialId), // Decode the base64 string\r\n        (c) => c.charCodeAt(0)\r\n      );\r\n\r\n      // Generate a secure challenge (e.g., using crypto or get it from your server)\r\n      const challenge = this.generateChallenge();\r\n\r\n      // Prepare assertion options\r\n      const assertionOptions = {\r\n        challenge: challenge, // Use the generated challenge\r\n        allowCredentials: [\r\n          {\r\n            id: credentialId, // Use the decoded credentialId\r\n            type: \"public-key\",\r\n          },\r\n        ],\r\n        userVerification: \"required\",\r\n        timeout: 60000,\r\n      };\r\n\r\n      // Request the assertion\r\n      const assertion = await navigator.credentials.get({\r\n        publicKey: assertionOptions,\r\n      });\r\n\r\n      // If the assertion was successful, we sign the user into Firebase\r\n      if (assertion) {\r\n        // Get the email and password from the stored data\r\n        const { email, password } = storedCredential;\r\n\r\n        // Sign in the user with the stored email and password\r\n        const auth = getAuth();\r\n        await signInWithEmailAndPassword(auth, email, password);\r\n        console.log(\"User successfully authenticated with Firebase.\");\r\n\r\n        // Redirect to the dashboard if authentication is successful\r\n        if (!sessionStorage.getItem(\"redirected\")) {\r\n          sessionStorage.setItem(\"redirected\", \"true\");\r\n          window.location.href = \"index.html\";\r\n        }\r\n        return true;\r\n      } else {\r\n        console.error(\"Biometric authentication failed\");\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error authenticating with biometric:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate a secure challenge (This can be securely generated on the server)\r\n  generateChallenge() {\r\n    // Simple random challenge for now; use a more secure method in production\r\n    return new Uint8Array(32);\r\n  }\r\n}\r\n\r\n// Make sure the BiometricAuth class is globally available\r\nwindow.BiometricAuth = BiometricAuth;\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$ee99fdb6e79a3b19$export$ae1320360e981535","set","s","enumerable","configurable","$gdelx","$6AR8M","$ee99fdb6e79a3b19$var$database","getDatabase","constructor","available","window","PublicKeyCredential","console","log","isUserVerifyingPlatformAuthenticatorAvailable","error","userId","userName","email","password","userIdBuffer","TextEncoder","encode","publicKeyCredentialCreationOptions","challenge","Uint8Array","rp","name","location","hostname","user","displayName","pubKeyCredParams","type","alg","authenticatorSelection","authenticatorAttachment","userVerification","timeout","credential","navigator","credentials","create","publicKey","credentialId","btoa","String","fromCharCode","rawId","ref","uid","timestamp","Date","now","authenticate","credentialSnapshot","exists","storedCredential","val","from","atob","c","charCodeAt","generateChallenge","allowCredentials","auth","getAuth","signInWithEmailAndPassword","sessionStorage","getItem","setItem","href","BiometricAuth"],"version":3,"file":"index.3e1f9f21.js.map"}